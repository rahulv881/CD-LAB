1. WAP in C to implement the combined transition diagram for i) identifiers: BEGIN, END, IF, THEN, ELSE ii)
   integer constants and iii) relational operators: <, <=, =, <>, >, >= that are commonly used in any high level language. 
  
2. Using flex, write a lexical analyzer for the following specifications of the tokens: 
	a. Comments are surrounded by /* and */ 
	b. Blanks between tokens are optional, with the exception that keywords must be surrounded by blanks and newlines. 
	c.Identifier: 
		letter → [a-z, A-Z] 
		digit → [0-9] 
		id → letter (letter | digit)* 
		The lexer shall recognize identifiers. An identifier is a sequence of letters and digits, starting with a letter. The underscore ‘_’ counts as a letter. 
	d. Keywords: 
		begin, end, if, then, else, for , do , while, switch, case, default, break, continue, goto
		
3. Using flex write a lexical analyzer for the following specifications of the tokens: 
	a. Keywords: else, int, void, if, else, while, return. For each one of them, the lexer shall return the tokens INT, CHAR, VOID, IF, ELSE, WHILE, RETURN respectively. 
	b. It recognizes integer numbers. An integer number is a sequence of digits, possibly starting with a + or -. 
	c. It recognizes real numbers. A real number is a sequence of digits, possibly starting with a + or – and / or with . and E notations. For each real number, it shall return the token REAL. 
	d. The lexer shall recognize the operators ‘->’, ‘&&’, ‘||’, ‘.’ for which it shall return the tokens PTR_OP, AND_OP, OR_OP, and DOT_OP respectively. 
	e. It recognizes operators ‘-’, ‘+’, ‘*’, ‘/’ for which it shall return the same character as token. 
	f. It recognizes separators ‘;’, ‘{’, ‘}’, ‘,’, ‘=’, ‘(’, ‘)’, ‘&’, ‘~’, , ‘[‘ and ‘]’ for which it shall return the same character as token.


4. Write a program to generate precedence function for the following grammar assuming that the precedence table is given: 
	E → E+E | E-E | E*E | E/E | E↑E | (E) | id

5. Consider the following regular expressions: 
	a) ((a + b)*(c+d)*)+ + ab*c*d 
	b) (0 + 1)* + 0*1* 
	c) (01*2 + 0*2+1)+
	Write flex programs for above regular expressions mentioned above.

7. Write a program for FIRST and FOLLOW computations for the following grammar: 
	E → E + T | T 
	T → T * F | F 
	F → (E) | id
	
8. Write a YACC program to check whether given string is palindrome or not by the grammar. 	
	
9. Write a program to implement a top-down parsing by recursive procedures for the grammar: 
	S → Aa | b 
	A → Ac | Sd | f

10. Write a YACC program to implement a top-down parsing by recursive procedures for the grammar: 
	S → cAd 
	A → ab| a
	
	
11. Write a YACC program to check whether given string a^nb^nis accepted by the grammar. 
	Also write a YACC program to recognize a valid variable which starts with a letter followed by a digit. 	
	

12. Write a YACC program to recognize a valid variable which starts with a letter followed by a letter. 
	
13. Write a YACC program to parse an arithmetic expression following the grammar: 
	E → E + E | E – E | E * E | E / E | E ↑ E | (E) | - E | id 
	Also, evaluate the arithmetic expression.

14. Write a YACC program to parse if-then-else statement following the grammar 
	S → iCtS| iCtSeS |a 
	C →b

16. Write a YACC program that recognizes strings with balanced parenthesis.Consider all the three types of braces i.e. “{“, “]” and “(“ . 

17. Write a YACC program to implement a top-down parsing by recursive procedures for the grammar. 
	S --> ABC 
	A--> abA | ab 	
	B--> b | BC 
	C--> c | cC

	
	


http://ge.tt/4CqsfMp2  